package p1;
/**
 * @since  2019/11/09
 */
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingConstants;

/**
 * Calculator class is used to create GUI
 */
public class Calculator extends JFrame
{
	JTextField text = new JTextField();
	JPanel row2 = new JPanel();
	
	String[][] buttons = {{"7","8","9","AC"},{"4","5","6","/"},{"1","2","3","+"},{"0","-","*","="}};
	JButton[][]button = new JButton[4][4];

	/**
	 * Main function.
	 */
	public static void main(String[] args)
	{
		Calculator calculator = new Calculator();
		calculator.setListener();
	}

	/**
	 * The calculator interface is similar to Casio fx-82ES PLUS A.
	 */
	public Calculator()
	{
		super("calculator");
		setSize(400,300);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setLayout(new BorderLayout());
		text.setPreferredSize(new Dimension(30, 40));
		text.setHorizontalAlignment(SwingConstants.TRAILING);
		text.setEditable(false);
		add(text, BorderLayout.NORTH);
		GridLayout layout2 = new GridLayout(4,4,5,5);
		row2.setLayout(layout2);
		for(int i = 0; i < buttons.length; i++)
		{
			for(int j = 0; j < buttons[0].length; j++)
			{
				button[i][j] = new JButton(buttons[i][j]);
				row2.add(button[i][j]);
			}
		}
		add(row2, BorderLayout.CENTER);
		setResizable(false);
		setVisible(true);
	}

	/**
	 * Event listener which gives responses to buttons.
	 */
	public void setListener()
	{
		Listener listener = new Listener(this);
		for(int i = 0; i < buttons.length; i++)
		{
			for(int j = 0; j < buttons[0].length; j++)
			{
				button[i][j].addActionListener(listener);
			}
		}
	}
}
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;

/**
 * Listener class.
 */
public class Listener implements ActionListener {
    private Calculator calculator;
    private String s0, s1, s2;

    public Listener(Calculator calculator) {
        this.calculator = calculator;
        s0 = s1 = s2 = "";
    }

    public void actionPerformed(ActionEvent event) {
        JButton button = (JButton) event.getSource();
        String s = button.getText();
        // =
        if (s.equals("=")) {
            double result;
            // store the value in 1st
            if (s1.equals("+"))
                result = (Double.parseDouble(s0) + Double.parseDouble(s2));
            else if (s1.equals("-"))
                result = (Double.parseDouble(s0) - Double.parseDouble(s2));
            else if (s1.equals("/"))
                result = (Double.parseDouble(s0) / Double.parseDouble(s2));
            else
                result = (Double.parseDouble(s0) * Double.parseDouble(s2));

            // set the value of text
            try {
                calculator.text.setText(s0 + s1 + s2 + "=" + result);
                // convert it to string
                s0 = Double.toString(result);
                s1 = s2 = "";
            } catch (Exception e) {
                calculator.text.setText("Error!");
            }
        } else if (button.getText().equals("AC")) {
            // clear the one letter
            s0 = s1 = s2 = "";
            // set the value of text
            calculator.text.setText("");
        } else if (button.getText().equals("1") || button.getText().equals("2") || button.getText().equals("3") ||
                button.getText().equals("4") || button.getText().equals("5") || button.getText().equals("6") ||
                button.getText().equals("7") || button.getText().equals("8") || button.getText().equals("9") ||
                button.getText().equals("0")) {
            // 0-9
            // if operand is present then add to second no
            if (!s1.equals(""))
                s2 = s2 + s;
            else
                s0 = s0 + s;

            // set the value of text
            calculator.text.setText(s0 + s1 + s2);
        } else {
            // if there was no operand
            if (s1.equals("") || s2.equals(""))
                s1 = s;
            // else evaluate
            else {
                double result;
                double s0Value = Double.parseDouble(s0);
                double s2Value = Double.parseDouble(s2);

                if (s1.equals("+"))
                    result = s0Value + s2Value;
                else if (s1.equals("-"))
                    result = s0Value - s2Value;
                else if (s1.equals("/"))
                    result = s0Value / s2Value;
                else
                    result = s0Value * s2Value;

                s0 = Double.toString(result);
                s1 = s;
                s2 = "";
            }

            calculator.text.setText(s0 + s1 + s2);

        }
    }
}
-----------------------------------------------------------------------
package p2;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;

import javax.swing.*;

public class Main extends JFrame {
    private final int COLUMN = 6;
    private final List<String> TITLES = Arrays.asList(
            "id", "name", "gender", "phone");
    private Vector<Vector<String>> dataModel = new Vector<Vector<String>>();
    private QueryItem name = new QueryItem("nameï¼š", 10);
    private QueryItem gender = new QueryItem("genderï¼š", 10);
    private QueryItem phone = new QueryItem("phoneï¼š", 10);
    private JButton insertBtn = new JButton("add");
    private MyTable table;
    private int dataLength = 0;
    private String[][] data = new String[100][COLUMN];


    /**
     * main funciton.
     *
     * @param args
     */
    public static void main(String[] args) {
        Main frame = new Main("Student information System");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setMinimumSize(new Dimension(750, 500));
        frame.setVisible(true);
        frame.setResizable(false);
    }

    /**
     * View: construct function,create user boundary
     *
     * @param title String
     */
    public Main(String title) {
        super(title);

        Vector<String> titles = new Vector<String>(TITLES);
        table = new MyTable(dataModel, titles);
        table.getColumnModel().getColumn(1).setPreferredWidth(30);
        table.getColumnModel().getColumn(2).setPreferredWidth(30);
        table.getColumnModel().getColumn(3).setPreferredWidth(30);

        JPanel controlPanel = new JPanel();
        controlPanel.setLayout(new FlowLayout());
        controlPanel.add(name);
        controlPanel.add(gender);
        controlPanel.add(phone);
        controlPanel.add(insertBtn);
        controlPanel.setPreferredSize(new Dimension(0, 130));

        JPanel tablePanel = new JPanel();
        tablePanel.setLayout(new BoxLayout(tablePanel, BoxLayout.Y_AXIS));
        tablePanel.add(Box.createRigidArea(new Dimension(0, 20)));
        tablePanel.add(table.getTableHeader());
        tablePanel.add(new JScrollPane(table));


        this.add(controlPanel, BorderLayout.NORTH);
        this.add(tablePanel, BorderLayout.CENTER);
        this.add(Box.createRigidArea(new Dimension(20, 0)), BorderLayout.WEST);
        this.add(Box.createRigidArea(new Dimension(20, 0)), BorderLayout.EAST);
        this.add(Box.createRigidArea(new Dimension(0, 20)), BorderLayout.SOUTH);

        setActionListener();
    }


    /**
     * set event listener
     */
    private void setActionListener() {
        //according condition,show the results

        /**
         * Control: insert btn
         */
        insertBtn.addActionListener(new ActionListener() {

            //insert to table
            @Override
            public void actionPerformed(ActionEvent e) {
                String sname = getNameText();
                String sgender = getGenderText();
                String sphone = getPhoneText();


                if (sname.equals("") || sgender.equals("") || sphone.equals("")) {
                    JOptionPane.showMessageDialog(null, "please input name, gender and phone ", "warning", JOptionPane.PLAIN_MESSAGE);
                    return;
                }
                String nextid = String.valueOf(dataLength);


                String[] newItem = new String[COLUMN];
                newItem[0] = nextid;
                newItem[1] = sname;
                newItem[2] = sgender;
                newItem[3] = sphone;
                data[dataLength++] = newItem;
                Vector<String> record = new Vector<String>();
                for (int i = 0; i < COLUMN; i++) {
                    record.add(newItem[i]);
                }
                dataModel.add(record);
                //update table
                table.validate();
                table.updateUI();
            }
        });

    }

    /**
     * Model phone.
     * @return phone String
     */
    private String getPhoneText() {
        return phone.getText();
    }

    /**
     * Model gender.
     * @return gender String
     */
    private String getGenderText() {
        return gender.getText();
    }

    /**
     * Model gender.
     * @return gender String
     */
    private String getNameText() {
        return name.getText();
    }
}

class QueryItem extends JPanel {
    private JLabel label;
    private JTextField textfield;

    public QueryItem(String labelText, int textWidth) {
        label = new JLabel(labelText);
        textfield = new JTextField(textWidth);
        this.add(label);
        this.add(textfield);
    }

    public String getText() {
        return textfield.getText();
    }
}


class MyTable extends JTable {
    public MyTable(Vector data, Vector title) {
        super(data, title);
    }

    @Override
    public boolean isCellEditable(int row, int column) {
        if (column == 0) return false;
        else return true;
    }
}

